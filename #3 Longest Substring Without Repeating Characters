Question:
Given a string, find the length of the longest substring without repeating characters.
Example 1:
Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 


Idea:
Simple brute-force method and the code is:
    int lengthOfLongestSubstring(string s) {
        int l=s.length();
        int size=0;
        int i=0;
        int j=0;
        for(i=0;i<l;i++)
        {
            int flag2=0;
            for(j=i+1;j<l;j++)
            {
                int flag=0;
                for(int k=i;k<j;k++)
                {
                    if(s[k]==s[j])
                        flag=1;
                }
                if(flag)
                {
                    size=max(size,j-i);
                    flag2=1;
                    break;
                }
            }
            if(flag2==0)
            {
                size=max(size,j-i);
                return size;
            }
        }
        return size;
    }
    When I submmit this code to the OJ, I get the judge as following:
    "faster than 11.45% of C++ online submissions"
    Fine , that means I need consider how to optimize it.
    Since it contains a finding process ,maybe I can use hashmap to improve the perfromance of the algorithm.Here is the code :

    int lengthOfLongestSubstring(string s) {
    map<char,int> hashx;
    auto end=hashx.end();
    int size =0;
    int n=s.length();
    for(int j=0,i=0; j<n; j++)
    {
        auto find = hashx.find(s[j]);
        if(find!=end)
        {
            i=max(find->second,i);
            
        }
             hashx[s[j]]=j+1;
             size=max(size,j-i+1);   
    }
    return size;
    }
    
   Some detail should be concentrated on:
   1.When using map , be sure which element in the map is key and which one is value. Since function 'find' will just find the key, 
   map will get value via the found key. Select which kind of element should be key and which value.
   2.When insert the pair into a map, we can use function 'insert' , 'emplace' or straight use  c. But if we use the 
   first two function insert the an existing key ,the operation fail and the new pair will not be insert in. If we use 
   'cout<<hashx['a']<<endl;' the key will upgrade.

    
